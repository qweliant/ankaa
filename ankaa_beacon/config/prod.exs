import Config

# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix assets.deploy` task,
# which you should run after static files are built and
# before starting your production server.
config :ankaa, AnkaaWeb.Endpoint, cache_static_manifest: "priv/static/cache_manifest.json"

# Configures Swoosh API Client
config :swoosh, api_client: Swoosh.ApiClient.Finch, finch_name: Ankaa.Finch

# Disable Swoosh Local Memory Storage
config :swoosh, local: false

# Do not print debug messages in production
config :logger, level: :info

# Runtime production configuration, including reading
# of environment variables, is done on config/runtime.exs.

# Configure your primary PostgreSQL database
config :ankaa, Ankaa.Repo,
  username: System.get_env("PROD_POSTGRES_USER"),
  password: System.get_env("PROD_POSTGRES_PASSWORD"),
  hostname: System.get_env("PROD_POSTGRES_HOST"),
  # Updated to match .env
  database: System.get_env("PROD_POSTGRES_DB"),
  port: String.to_integer(System.get_env("PROD_POSTGRES_PORT") || "5432"),
  ssl: true

# Configure your TimescaleDB database
config :ankaa, Ankaa.TimescaleRepo,
  username: System.get_env("PROD_TIMESCALE_USER"),
  password: System.get_env("PROD_TIMESCALE_PASSWORD"),
  hostname: System.get_env("PROD_TIMESCALE_HOST"),
  # Updated to match .env
  database: System.get_env("PROD_TIMESCALE_DB"),
  port: String.to_integer(System.get_env("PROD_TIMESCALE_PORT") || "5433"),
  ssl: true

# Configure your MQTT broker
config :ankaa, :mqtt,
  host: System.get_env("PROD_MQTT_HOST"),
  port: String.to_integer(System.get_env("PROD_MQTT_PORT") || "1883"),
  client_id: System.get_env("PROD_MQTT_CLIENT_ID"),
  username: System.get_env("PROD_MQTT_USERNAME"),
  password: System.get_env("PROD_MQTT_PASSWORD")
